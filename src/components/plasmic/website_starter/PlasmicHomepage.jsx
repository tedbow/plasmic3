// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cdg6dZHGqrxsR7teq2SFkR
// Component: S1HZ9qe83s7l
import * as React from "react";
import { Link, navigate as __gatsbyNavigate } from "gatsby";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import TextInput from "../../TextInput"; // plasmic-import: B9JER4avHDIJ/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import * as projectcss from "./plasmic_website_starter.module.css"; // plasmic-import: cdg6dZHGqrxsR7teq2SFkR/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: S1HZ9qe83s7l/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

export function Head() {
  return <></>;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "gotoPage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    userFetch: usePlasmicDataOp(() => {
      return {
        sourceId: "iqur248QmCSgeKHKZn5Utd",
        opId: "fd61d5d4-4d07-4526-886b-432adc023e50",
        userArgs: {
          path: [$ctx.query.user]
        },
        cacheKey: `plasmic.$.fd61d5d4-4d07-4526-886b-432adc023e50.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    userRepos: usePlasmicDataOp(() => {
      return {
        sourceId: "iqur248QmCSgeKHKZn5Utd",
        opId: "e3ccaf9b-1f47-4480-b394-280f6ad62413",
        userArgs: {
          path: [$ctx.query.user]
        },
        cacheKey: `plasmic.$.e3ccaf9b-1f47-4480-b394-280f6ad62413.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                sty.h1__aCml
              )}
            >
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__fzdDo
                )}
              >
                {"Github info:"}
              </span>
              <span
                className={classNames(
                  projectcss.all,
                  projectcss.span,
                  projectcss.__wab_text,
                  sty.span__nhPu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.userFetch.data.response.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Welcome to your first page.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </span>
            </h1>
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"200px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.userFetch.data.response.avatar_url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <ul
              data-plasmic-name={"ul"}
              data-plasmic-override={overrides.ul}
              className={classNames(projectcss.all, projectcss.ul, sty.ul)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.userRepos.data.response;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <li
                    data-plasmic-name={"li"}
                    data-plasmic-override={overrides.li}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      sty.li
                    )}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return currentItem.html_url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://www.plasmic.app/";
                            }
                            throw e;
                          }
                        })()}
                        platform={"gatsby"}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Some link text";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </p.PlasmicLink>
                    </div>
                  </li>
                );
              })}
            </ul>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__leM4V
              )}
            >
              {"Switch User"}
            </h1>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange:
                  p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],

                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onIsSubmittingChange:
                  p.generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              p.initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Enter username"}
                    value={
                      p.generateStateValueProp($state, [
                        "textInput",
                        "value"
                      ]) ?? ""
                    }
                  />
                </FormWrapper>
              );
            })()}
            <AntdButton
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              onClick={async () => {
                const $steps = {};
                $steps["updateGotoPage"] = true
                  ? (() => {
                      const actionArgs = {
                        operation: 0,
                        variable: {
                          objRoot: $state,
                          variablePath: ["gotoPage"]
                        },
                        value: "/github-info?user=" + $state.textInput.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        p.set(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateGotoPage"] != null &&
                  typeof $steps["updateGotoPage"] === "object" &&
                  typeof $steps["updateGotoPage"].then === "function"
                ) {
                  $steps["updateGotoPage"] = await $steps["updateGotoPage"];
                }
                $steps["goToPage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: (() => {
                          try {
                            return $state.gotoPage;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "/github-info?user=";
                            }
                            throw e;
                          }
                        })()
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __gatsbyNavigate(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToPage"] != null &&
                  typeof $steps["goToPage"] === "object" &&
                  typeof $steps["goToPage"].then === "function"
                ) {
                  $steps["goToPage"] = await $steps["goToPage"];
                }
              }}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Switch"}
              </div>
            </AntdButton>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "img",
    "ul",
    "li",
    "freeBox",
    "link",
    "form",
    "textInput",
    "button",
    "text"
  ],

  section: [
    "section",
    "img",
    "ul",
    "li",
    "freeBox",
    "link",
    "form",
    "textInput",
    "button",
    "text"
  ],

  img: ["img"],
  ul: ["ul", "li", "freeBox", "link"],
  li: ["li", "freeBox", "link"],
  freeBox: ["freeBox", "link"],
  link: ["link"],
  form: ["form", "textInput"],
  textInput: ["textInput"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
